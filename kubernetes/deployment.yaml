---
apiVersion: v1
kind: ConfigMap
metadata:
  name: keystore-config-miner01
  namespace: default
  labels:
    app: kuberneteth
    name: keystore-config-miner01
data:
  UTC--2019-05-20T13-38-09.704745844Z--0ce04250b1e8aefa4da5411079365881d9edb2a0: |-
    {
      "address": "0ce04250b1e8aefa4da5411079365881d9edb2a0",
      "crypto": {
        "cipher": "aes-128-ctr",
        "ciphertext": "300f4a5c25a8663e2a389d15dd58d3328576062f5214e418c145c2b3ecca74f2",
        "cipherparams": {
          "iv": "2b3ec2b916211fb227a80810d1d025ca"
        },
        "kdf": "scrypt",
        "kdfparams": {
          "dklen": 32,
          "n": 262144,
          "p": 1,
          "r": 8,
          "salt": "5a6d99842f875647e3dda2554b790d5c08b9622db21732528b1ee853a382281f"
        },
        "mac": "5e62802b621c7266b4cbd0b63db71e1f02a483aa3be898becb5d20fbbd699260"
      },
      "id": "bfb802e2-20d9-4291-80fa-95e85a58b60b",
      "version": 3
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: keystore-config-miner02
  namespace: default
  labels:
    app: kuberneteth
    name: keystore-config-miner02
data:
  UTC--2019-05-20T13-38-26.005045673Z--f7613db032b4fd8569ef036f0e0f2757846659ab: |-
    {
      "address": "f7613db032b4fd8569ef036f0e0f2757846659ab",
      "crypto": {
        "cipher": "aes-128-ctr",
        "ciphertext": "0af8158b53a9134076865ac53d7c5ad3c3172bee8526617e8075f472149542cc",
        "cipherparams": {
          "iv": "62252fdbdd551605f8bc2a1dce5ce7f1"
        },
        "kdf": "scrypt",
        "kdfparams": {
          "dklen": 32,
          "n": 262144,
          "p": 1,
          "r": 8,
          "salt": "32c17839a9f6bd7f6b8a5c9921261527d0005138821805df9d0c6168bfc4bd99"
        },
        "mac": "b39c50540beaa17224682bcd1d2dda8f44e30f1730fd848b60bf2568ad95acb9"
      },
      "id": "4394990a-392e-4886-ad0a-17ddc605cd2d",
      "version": 3
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: keystore-config-miner03
  namespace: default
  labels:
    app: kuberneteth
    name: keystore-config-miner03
data:
  UTC--2019-05-20T13-38-30.380947439Z--563c415aa48f173961b868354ea94a3e0cd6e387: |-
    {
      "address": "563c415aa48f173961b868354ea94a3e0cd6e387",
      "crypto": {
        "cipher": "aes-128-ctr",
        "ciphertext": "da342894897f15ff346a1a985e397c0d8f4c01c05d2def88868d4f1a31334420",
        "cipherparams": {
          "iv": "a4bd3c31d8f06e7d96f342256828448d"
        },
        "kdf": "scrypt",
        "kdfparams": {
          "dklen": 32,
          "n": 262144,
          "p": 1,
          "r": 8,
          "salt": "e4085d1f871ce45d363cef3ff2af4ea738b213d15fa25487f3c319b7d45e0d9f"
        },
        "mac": "4cb75bc1a6f72d11adcfcca8a185dd831fa71915e2b2cecc49099cf7cad6f089"
      },
      "id": "20d0223c-636c-42f9-8a6c-c80d0ef216ee",
      "version": 3
    }

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: gethconfig-miner01
  namespace: default
  labels:
    app: kuberneteth
    name: gethconfig-miner01
data:
  gethconfig: |-
    [Eth]
    NetworkId = 12341234
    SyncMode = "full"
    LightPeers = 100
    DatabaseCache = 768
    Etherbase = "0x0ce04250b1e8aefa4da5411079365881d9edb2a0"
    MinerGasPrice = 0
    EnablePreimageRecording = false
    
    [Eth.Ethash]
    CacheDir = "ethash"
    CachesInMem = 2
    CachesOnDisk = 3
    DatasetDir = "/root/.ethash"
    DatasetsInMem = 1
    DatasetsOnDisk = 2
    PowMode = 0
    
    [Eth.TxPool]
    Locals = []
    NoLocals = false
    Journal = "transactions.rlp"
    Rejournal = 3600000000000
    PriceLimit = 1
    PriceBump = 10
    AccountSlots = 16
    GlobalSlots = 4096
    AccountQueue = 64
    GlobalQueue = 1024
    Lifetime = 10800000000000
    
    [Eth.GPO]
    Blocks = 20
    Percentile = 60
    
    [Shh]
    MaxMessageSize = 1048576
    MinimumAcceptedPOW = 2e-01
    
    [Node]
    UserIdent = "miner01"
    DataDir = "/etc/testnet/miner01"
    IPCPath = "/etc/testnet/miner01/geth.ipc"
    HTTPHost = "0.0.0.0"
    HTTPPort = 8545
    HTTPCors = ["*"]
    HTTPVirtualHosts = ["*"]
    HTTPModules = ["db", "eth", "net", "web3", "personal", "miner", "admin", "clique"]
    WSHost = "0.0.0.0"
    WSPort = 8546
    WSOrigins = ["*"]
    WSModules = ["net", "web3", "eth", "shh"]
    
    [Node.P2P]
    MaxPeers = 25
    NoDiscovery = false
    BootstrapNodes = []
    BootstrapNodesV5 = []
    StaticNodes = []
    TrustedNodes = []
    ListenAddr = ":30303"
    EnableMsgEvents = false
    
    [Dashboard]
    Host = "0.0.0.0"
    Port = 8080
    Refresh = 3000000000

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: gethconfig-miner02
  namespace: default
  labels:
    app: kuberneteth
    name: gethconfig-miner02
data:
  gethconfig: |-
    [Eth]
    NetworkId = 12341234
    SyncMode = "full"
    LightPeers = 100
    DatabaseCache = 768
    Etherbase = "0xf7613db032b4fd8569ef036f0e0f2757846659ab"
    MinerGasPrice = 0
    EnablePreimageRecording = false
    
    [Eth.Ethash]
    CacheDir = "ethash"
    CachesInMem = 2
    CachesOnDisk = 3
    DatasetDir = "/root/.ethash"
    DatasetsInMem = 1
    DatasetsOnDisk = 2
    PowMode = 0
    
    [Eth.TxPool]
    Locals = []
    NoLocals = false
    Journal = "transactions.rlp"
    Rejournal = 3600000000000
    PriceLimit = 1
    PriceBump = 10
    AccountSlots = 16
    GlobalSlots = 4096
    AccountQueue = 64
    GlobalQueue = 1024
    Lifetime = 10800000000000
    
    [Eth.GPO]
    Blocks = 20
    Percentile = 60
    
    [Shh]
    MaxMessageSize = 1048576
    MinimumAcceptedPOW = 2e-01
    
    [Node]
    UserIdent = "miner02"
    DataDir = "/etc/testnet/miner02"
    IPCPath = "/etc/testnet/miner02/geth.ipc"
    HTTPHost = "0.0.0.0"
    HTTPPort = 8545
    HTTPCors = ["*"]
    HTTPVirtualHosts = ["*"]
    HTTPModules = ["db", "eth", "net", "web3", "personal", "miner", "admin", "clique"]
    WSHost = "0.0.0.0"
    WSPort = 8546
    WSOrigins = ["*"]
    WSModules = ["net", "web3", "eth", "shh"]
    
    [Node.P2P]
    MaxPeers = 25
    NoDiscovery = false
    BootstrapNodes = []
    BootstrapNodesV5 = []
    StaticNodes = []
    TrustedNodes = []
    ListenAddr = ":30303"
    EnableMsgEvents = false
    
    [Dashboard]
    Host = "0.0.0.0"
    Port = 8080
    Refresh = 3000000000

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: gethconfig-miner03
  namespace: default
  labels:
    app: kuberneteth
    name: gethconfig-miner03
data:
  gethconfig: |-
    [Eth]
    NetworkId = 12341234
    SyncMode = "full"
    LightPeers = 100
    DatabaseCache = 768
    Etherbase = "0x563c415aa48f173961b868354ea94a3e0cd6e387"
    MinerGasPrice = 0
    EnablePreimageRecording = false
    
    [Eth.Ethash]
    CacheDir = "ethash"
    CachesInMem = 2
    CachesOnDisk = 3
    DatasetDir = "/root/.ethash"
    DatasetsInMem = 1
    DatasetsOnDisk = 2
    PowMode = 0
    
    [Eth.TxPool]
    Locals = []
    NoLocals = false
    Journal = "transactions.rlp"
    Rejournal = 3600000000000
    PriceLimit = 1
    PriceBump = 10
    AccountSlots = 16
    GlobalSlots = 4096
    AccountQueue = 64
    GlobalQueue = 1024
    Lifetime = 10800000000000
    
    [Eth.GPO]
    Blocks = 20
    Percentile = 60
    
    [Shh]
    MaxMessageSize = 1048576
    MinimumAcceptedPOW = 2e-01
    
    [Node]
    UserIdent = "miner03"
    DataDir = "/etc/testnet/miner03"
    IPCPath = "/etc/testnet/miner03/geth.ipc"
    HTTPHost = "0.0.0.0"
    HTTPPort = 8545
    HTTPCors = ["*"]
    HTTPVirtualHosts = ["*"]
    HTTPModules = ["db", "eth", "net", "web3", "personal", "miner", "admin", "clique"]
    WSHost = "0.0.0.0"
    WSPort = 8546
    WSOrigins = ["*"]
    WSModules = ["net", "web3", "eth", "shh"]
    
    [Node.P2P]
    MaxPeers = 25
    NoDiscovery = false
    BootstrapNodes = []
    BootstrapNodesV5 = []
    StaticNodes = []
    TrustedNodes = []
    ListenAddr = ":30303"
    EnableMsgEvents = false
    
    [Dashboard]
    Host = "0.0.0.0"
    Port = 8080
    Refresh = 3000000000


---
apiVersion: v1
kind: ConfigMap
metadata:
  name: monitor-config
  namespace: default
  labels:
    app: kuberneteth
    name: monitor-config
data:
  app.json: |-
    [
      {
        "name"              : "miner01",
        "cwd"               : ".",
        "script"            : "app.js",
        "log_date_format"   : "YYYY-MM-DD HH:mm Z",
        "merge_logs"        : false,
        "watch"             : false,
        "exec_interpreter"  : "node",
        "exec_mode"         : "fork_mode",
        "env":
        {
          "NODE_ENV"        : "production",
          "RPC_HOST"        : "miner01-rpchost",
          "RPC_PORT"        : "8545",
          "LISTENING_PORT"  : "30303",
          "INSTANCE_NAME"   : "miner01",
          "CONTACT_DETAILS" : "",
          "WS_SERVER"       : "localhost:3001",
          "WS_SECRET"       : "connectme",
          "VERBOSITY"       : 3
        }
      },
      {
        "name"              : "miner02",
        "cwd"               : ".",
        "script"            : "app.js",
        "log_date_format"   : "YYYY-MM-DD HH:mm Z",
        "merge_logs"        : false,
        "watch"             : false,
        "exec_interpreter"  : "node",
        "exec_mode"         : "fork_mode",
        "env":
        {
          "NODE_ENV"        : "production",
          "RPC_HOST"        : "miner02-rpchost",
          "RPC_PORT"        : "8545",
          "LISTENING_PORT"  : "30303",
          "INSTANCE_NAME"   : "miner02",
          "CONTACT_DETAILS" : "",
          "WS_SERVER"       : "localhost:3001",
          "WS_SECRET"       : "connectme",
          "VERBOSITY"       : 3
        }
      },
      {
        "name"              : "miner03",
        "cwd"               : ".",
        "script"            : "app.js",
        "log_date_format"   : "YYYY-MM-DD HH:mm Z",
        "merge_logs"        : false,
        "watch"             : false,
        "exec_interpreter"  : "node",
        "exec_mode"         : "fork_mode",
        "env":
        {
          "NODE_ENV"        : "production",
          "RPC_HOST"        : "miner03-rpchost",
          "RPC_PORT"        : "8545",
          "LISTENING_PORT"  : "30303",
          "INSTANCE_NAME"   : "miner03",
          "CONTACT_DETAILS" : "",
          "WS_SERVER"       : "localhost:3001",
          "WS_SECRET"       : "connectme",
          "VERBOSITY"       : 3
        }
      }
    ]

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: explorer-config
  namespace: default
  labels:
    name: explorer-config
    app: kuberneteth
data:
  config.json: |-
    {
        "nodeAddr":     "miner01-rpchost",
        "gethPort":     8545,
        "startBlock":   0,
        "endBlock":     "latest",
        "quiet":        true,
        "syncAll":      true,
        "patch":        true,
        "patchBlocks":  100
    }

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: genesis-config
  namespace: default
  labels:
    app: kuberneteth
    name: genesis-config
data:
  Genesis-geth.json: |-
    {
        "config": {
            "chainId": 12341234,
            "homesteadBlock": 1,
            "eip150Block": 2,
            "eip150Hash": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "eip155Block": 3,
            "eip158Block": 3,
            "byzantiumBlock": 4,
            "clique": {
                "period": 15,
                "epoch": 30000
            }
        },
        "nonce": "0x0",
        "timestamp": "0x5cdec502",
        "extraData": "0x00000000000000000000000000000000000000000000000000000000000000000ce04250b1e8aefa4da5411079365881d9edb2a0563c415aa48f173961b868354ea94a3e0cd6e387f7613db032b4fd8569ef036f0e0f2757846659ab0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "gasLimit": "0xAAE6000",
        "difficulty" : "0x1",
        "mixHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "coinbase": "0x0000000000000000000000000000000000000000",
        "alloc": {
        },
        "number": "0x0",
        "gasUsed": "0x0",
        "parentHash": "0x0000000000000000000000000000000000000000000000000000000000000000"
    }

---
apiVersion: v1
kind: Service
metadata:
  name: miner01-svc
  labels:
    app: kuberneteth
    tier: backend
    name: miner01-svc
spec:
  selector:
    app: kuberneteth
    tier: backend
    name: miner01
  type: LoadBalancer
  externalTrafficPolicy: Cluster
  ports:
    - name: miner01-jsonrpc
      protocol: TCP
      port: 8545
      targetPort: 8545
      nodePort: 30001
    - name: miner01-wsrpc
      protocol: TCP
      port: 8546
      targetPort: 8546
    - name: miner01-ipc-discovery
      protocol: TCP
      port: 30303
      targetPort: 30303
      nodePort: 30002
    - name: miner01-dashboard
      protocol: TCP
      port: 8080
      targetPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: miner02-svc
  labels:
    app: kuberneteth
    tier: backend
    name: miner02-svc
spec:
  selector:
    app: kuberneteth
    tier: backend
    name: miner02
  type: LoadBalancer
  externalTrafficPolicy: Cluster
  ports:
    - name: miner02-jsonrpc
      protocol: TCP
      port: 8545
      targetPort: 8545
      nodePort: 30004
    - name: miner02-wsrpc
      protocol: TCP
      port: 8546
      targetPort: 8546
    - name: miner02-ipc-discovery
      protocol: TCP
      port: 30303
      targetPort: 30303
      nodePort: 30005
    - name: miner02-dashboard
      protocol: TCP
      port: 8080
      targetPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: miner03-svc
  labels:
    app: kuberneteth
    tier: backend
    name: miner03-svc
spec:
  selector:
    app: kuberneteth
    tier: backend
    name: miner03
  type: LoadBalancer
  externalTrafficPolicy: Cluster
  ports:
    - name: miner03-jsonrpc
      protocol: TCP
      port: 8545
      targetPort: 8545
      nodePort: 30006
    - name: miner03-wsrpc
      protocol: TCP
      port: 8546
      targetPort: 8546
    - name: miner03-ipc-discovery
      protocol: TCP
      port: 30303
      targetPort: 30303
      nodePort: 30007
    - name: miner03-dashboard
      protocol: TCP
      port: 8080
      targetPort: 8080

---
apiVersion: v1
kind: Service
metadata:
  name: geth-bootnode-svc
  labels:
    app: kuberneteth
    tier: backend
    name: geth-bootnode-svc
spec:
  selector:
    app: kuberneteth
    tier: backend
  ports:
    - name: geth-bootnode-ipc-discovery
      protocol: UDP
      port: 30303
      targetPort: 30303

---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: geth-boot-node-setup-pod
  labels:
    app: kuberneteth
    name: bootnode-setup-pod
spec:
  template:
    metadata:
      labels:
        app: kuberneteth
        name: bootnode-setup-pod
    spec:
      containers:
      - name: geth-boot-node-setup-container
        image: ijsfd/geth-node:latest
        imagePullPolicy: IfNotPresent
        command: [ "sh" ]
        args:
        - "-cx"
        - "cd /etc/testnet/bootnode;
           echo \"enode://$(/bootnode -nodekeyhex 091bd6067cb4612df85d9c1ff85cc47f259ced4d4cd99816b14f35650f59c322 -writeaddress)@$GETH_BOOTNODE_SVC_SERVICE_HOST:30303\" > enode.address;
           set +x;
           while true; do :; done;"
        volumeMounts:
        - name: geth-boot-node-persistent-storage
          mountPath: /etc/testnet/bootnode
      volumes:
      - name: geth-boot-node-persistent-storage
        hostPath:
          path: /var/lib/docker/geth-storage/bootnode
---
apiVersion: v1
kind: Pod
metadata:
  name: geth-boot-node-pod
  labels:
    app: kuberneteth
    name: geth-bootnode-pod
spec:
  containers:
  - name: geth-boot-node-container
    image: ijsfd/geth-node:latest
    imagePullPolicy: IfNotPresent
    ports:
      - containerPort: 30301
      - containerPort: 30303
        protocol: UDP
    command: [ "sh" ]
    args:
    - "-c"
    - "cd /etc/testnet/bootnode;
       /geth --datadir /etc/testnet/bootnode init /etc/geth/genesis/Genesis-geth.json;
       /bootnode --nodekeyhex 091bd6067cb4612df85d9c1ff85cc47f259ced4d4cd99816b14f35650f59c322 --addr \":30303\" --nat any --verbosity 9;"
    volumeMounts:
    - name: geth-boot-node-persistent-storage
      mountPath: /etc/testnet/bootnode
    - name: genesis-config-persistent-storage
      mountPath: /etc/geth/genesis/Genesis-geth.json
      subPath: Genesis-geth.json
  volumes:
  - name: geth-boot-node-persistent-storage
    hostPath:
      path: /var/lib/docker/geth-storage/bootnode
  - name: genesis-config-persistent-storage
    configMap:
      name: genesis-config
      items:
      - key: Genesis-geth.json
        path: Genesis-geth.json

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: kuberneteth
    tier: backend
    name: geth-miner01
  name: geth-miner01
spec:
  selector:
    matchLabels:
      app: kuberneteth
  replicas: 1
  serviceName: geth-miner01
  template:
    metadata:
      name: geth-miner01
      labels:
        app: kuberneteth
        tier: backend
        name: miner01
    spec:
      initContainers:
      - name: miner01-genesis-init-container
        image: ethereum/client-go:stable
        imagePullPolicy: IfNotPresent
        command: [ "sh" ]
        args:
        - "-cx"
        - "if [ ! -f /etc/testnet/miner01/genesis_created ]; then
             /usr/local/bin/geth --datadir /etc/testnet/miner01 init /etc/geth/genesis/Genesis-geth.json;
             touch /etc/testnet/miner01/genesis_created;
             echo R_e9bH5Jn8@vVSan > /etc/testnet/miner01/password.txt;

           fi;"
        volumeMounts:
        - name: miner01-persistent-storage
          mountPath: /etc/testnet/miner01
        - name: geth-boot-node-persistent-storage
          mountPath: /etc/testnet/bootnode
        - name: genesis-config-persistent-storage
          mountPath: /etc/geth/genesis/Genesis-geth.json
          subPath: Genesis-geth.json
      containers:
      - name: miner01-container
        image: ethereum/client-go:stable
        imagePullPolicy: IfNotPresent
        command: [ "sh" ]
        args:
        - "-cx"
        - "mkdir -p /etc/geth/miner01;
           cp /etc/gethconfigmap/miner01/gethconfig.toml /etc/geth/miner01;
           ENODE=$(cat /etc/testnet/bootnode/enode.address);
           ENODE_ESC=$(echo $ENODE | sed 's@//@\\\\/\\\\/@g');
           sed -i \"s/BootstrapNodes = \\[\\]/BootstrapNodes = [\\\"$ENODE_ESC\\\"]/g\" /etc/geth/miner01/gethconfig.toml;
           sed -i \"s/BootstrapNodesV5 = \\[\\]/BootstrapNodesV5 = [\\\"$ENODE_ESC\\\"]/g\" /etc/geth/miner01/gethconfig.toml;
           /usr/local/bin/geth \
           --dashboard \
           --mine \
           --verbosity 3  \
           --unlock 0x0ce04250b1e8aefa4da5411079365881d9edb2a0 --password /etc/testnet/miner01/password.txt --gasprice '0' \
           --config /etc/geth/miner01/gethconfig.toml;"
        ports:
          - containerPort: 8545
          - containerPort: 8546
            protocol: UDP
          - containerPort: 30303
          - containerPort: 8080
        volumeMounts:
        - name: miner01-persistent-storage
          mountPath: /etc/testnet/miner01
        - name: miner01-config-persistent-storage
          mountPath: /etc/gethconfigmap/miner01
        - name: keystore-config-persistent-storage
          mountPath: /etc/testnet/miner01/keystore/UTC--2019-05-20T13-38-09.704745844Z--0ce04250b1e8aefa4da5411079365881d9edb2a0
          subPath: UTC--2019-05-20T13-38-09.704745844Z--0ce04250b1e8aefa4da5411079365881d9edb2a0
        - name: geth-boot-node-persistent-storage
          mountPath: /etc/testnet/bootnode
      volumes:
      - name: keystore-config-persistent-storage
        configMap:
          name: keystore-config-miner01
          items:
          - key: UTC--2019-05-20T13-38-09.704745844Z--0ce04250b1e8aefa4da5411079365881d9edb2a0
            path: UTC--2019-05-20T13-38-09.704745844Z--0ce04250b1e8aefa4da5411079365881d9edb2a0
      - name: geth-boot-node-persistent-storage
        hostPath:
          path: /var/lib/docker/geth-storage/bootnode
      - name: genesis-config-persistent-storage
        configMap:
          name: genesis-config
          items:
          - key: Genesis-geth.json
            path: Genesis-geth.json
      - name: miner01-persistent-storage
        persistentVolumeClaim:
          claimName: volume-miner01
      - name: miner01-config-persistent-storage
        configMap:
          name: gethconfig-miner01
          items:
          - key: gethconfig
            path: gethconfig.toml
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: kuberneteth
    tier: backend
    name: geth-miner02
  name: geth-miner02
spec:
  selector:
    matchLabels:
      app: kuberneteth
  replicas: 1
  serviceName: geth-miner02
  template:
    metadata:
      name: geth-miner02
      labels:
        app: kuberneteth
        tier: backend
        name: miner02
    spec:
      initContainers:
      - name: miner02-genesis-init-container
        image: ethereum/client-go:stable
        imagePullPolicy: IfNotPresent
        command: [ "sh" ]
        args:
        - "-cx"
        - "if [ ! -f /etc/testnet/miner02/genesis_created ]; then
             /usr/local/bin/geth --datadir /etc/testnet/miner02 init /etc/geth/genesis/Genesis-geth.json;
             touch /etc/testnet/miner02/genesis_created;
             echo R_e9bH5Jn8@vVSan > /etc/testnet/miner02/password.txt;

           fi;"
        volumeMounts:
        - name: miner02-persistent-storage
          mountPath: /etc/testnet/miner02
        - name: geth-boot-node-persistent-storage
          mountPath: /etc/testnet/bootnode
        - name: genesis-config-persistent-storage
          mountPath: /etc/geth/genesis/Genesis-geth.json
          subPath: Genesis-geth.json
      containers:
      - name: miner02-container
        image: ethereum/client-go:stable
        imagePullPolicy: IfNotPresent
        command: [ "sh" ]
        args:
        - "-cx"
        - "mkdir -p /etc/geth/miner02;
           cp /etc/gethconfigmap/miner02/gethconfig.toml /etc/geth/miner02;
           ENODE=$(cat /etc/testnet/bootnode/enode.address);
           ENODE_ESC=$(echo $ENODE | sed 's@//@\\\\/\\\\/@g');
           sed -i \"s/BootstrapNodes = \\[\\]/BootstrapNodes = [\\\"$ENODE_ESC\\\"]/g\" /etc/geth/miner02/gethconfig.toml;
           sed -i \"s/BootstrapNodesV5 = \\[\\]/BootstrapNodesV5 = [\\\"$ENODE_ESC\\\"]/g\" /etc/geth/miner02/gethconfig.toml;
           /usr/local/bin/geth \
           --dashboard \
           --mine \
           --verbosity 3  \
           --unlock 0xf7613db032b4fd8569ef036f0e0f2757846659ab --password /etc/testnet/miner02/password.txt --gasprice '0' \
           --config /etc/geth/miner02/gethconfig.toml;"
        ports:
          - containerPort: 8545
          - containerPort: 8546
            protocol: UDP
          - containerPort: 30303
          - containerPort: 8080
        volumeMounts:
        - name: miner02-persistent-storage
          mountPath: /etc/testnet/miner02
        - name: miner02-config-persistent-storage
          mountPath: /etc/gethconfigmap/miner02
        - name: keystore-config-persistent-storage
          mountPath: /etc/testnet/miner02/keystore/UTC--2019-05-20T13-38-26.005045673Z--f7613db032b4fd8569ef036f0e0f2757846659ab
          subPath: UTC--2019-05-20T13-38-26.005045673Z--f7613db032b4fd8569ef036f0e0f2757846659ab
        - name: geth-boot-node-persistent-storage
          mountPath: /etc/testnet/bootnode
      volumes:
      - name: keystore-config-persistent-storage
        configMap:
          name: keystore-config-miner02
          items:
          - key: UTC--2019-05-20T13-38-26.005045673Z--f7613db032b4fd8569ef036f0e0f2757846659ab
            path: UTC--2019-05-20T13-38-26.005045673Z--f7613db032b4fd8569ef036f0e0f2757846659ab
      - name: geth-boot-node-persistent-storage
        hostPath:
          path: /var/lib/docker/geth-storage/bootnode
      - name: genesis-config-persistent-storage
        configMap:
          name: genesis-config
          items:
          - key: Genesis-geth.json
            path: Genesis-geth.json
      - name: miner02-persistent-storage
        persistentVolumeClaim:
          claimName: volume-miner02
      - name: miner02-config-persistent-storage
        configMap:
          name: gethconfig-miner02
          items:
          - key: gethconfig
            path: gethconfig.toml
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: kuberneteth
    tier: backend
    name: geth-miner03
  name: geth-miner03
spec:
  selector:
    matchLabels:
      app: kuberneteth
  replicas: 1
  serviceName: geth-miner03
  template:
    metadata:
      name: geth-miner03
      labels:
        app: kuberneteth
        tier: backend
        name: miner03
    spec:
      initContainers:
      - name: miner03-genesis-init-container
        image: ethereum/client-go:stable
        imagePullPolicy: IfNotPresent
        command: [ "sh" ]
        args:
        - "-cx"
        - "if [ ! -f /etc/testnet/miner03/genesis_created ]; then
             /usr/local/bin/geth --datadir /etc/testnet/miner03 init /etc/geth/genesis/Genesis-geth.json;
             touch /etc/testnet/miner03/genesis_created;
             echo R_e9bH5Jn8@vVSan > /etc/testnet/miner03/password.txt;

           fi;"
        volumeMounts:
        - name: miner03-persistent-storage
          mountPath: /etc/testnet/miner03
        - name: geth-boot-node-persistent-storage
          mountPath: /etc/testnet/bootnode
        - name: genesis-config-persistent-storage
          mountPath: /etc/geth/genesis/Genesis-geth.json
          subPath: Genesis-geth.json
      containers:
      - name: miner03-container
        image: ethereum/client-go:stable
        imagePullPolicy: IfNotPresent
        command: [ "sh" ]
        args:
        - "-cx"
        - "mkdir -p /etc/geth/miner03;
           cp /etc/gethconfigmap/miner03/gethconfig.toml /etc/geth/miner03;
           ENODE=$(cat /etc/testnet/bootnode/enode.address);
           ENODE_ESC=$(echo $ENODE | sed 's@//@\\\\/\\\\/@g');
           sed -i \"s/BootstrapNodes = \\[\\]/BootstrapNodes = [\\\"$ENODE_ESC\\\"]/g\" /etc/geth/miner03/gethconfig.toml;
           sed -i \"s/BootstrapNodesV5 = \\[\\]/BootstrapNodesV5 = [\\\"$ENODE_ESC\\\"]/g\" /etc/geth/miner03/gethconfig.toml;
           /usr/local/bin/geth \
           --dashboard \
           --mine \
           --verbosity 3  \
           --unlock 0x563c415aa48f173961b868354ea94a3e0cd6e387 --password /etc/testnet/miner03/password.txt --gasprice '0' \
           --config /etc/geth/miner03/gethconfig.toml;"
        ports:
          - containerPort: 8545
          - containerPort: 8546
            protocol: UDP
          - containerPort: 30303
          - containerPort: 8080
        volumeMounts:
        - name: miner03-persistent-storage
          mountPath: /etc/testnet/miner03
        - name: miner03-config-persistent-storage
          mountPath: /etc/gethconfigmap/miner03
        - name: keystore-config-persistent-storage
          mountPath: /etc/testnet/miner03/keystore/UTC--2019-05-20T13-38-30.380947439Z--563c415aa48f173961b868354ea94a3e0cd6e387
          subPath: UTC--2019-05-20T13-38-30.380947439Z--563c415aa48f173961b868354ea94a3e0cd6e387
        - name: geth-boot-node-persistent-storage
          mountPath: /etc/testnet/bootnode
      volumes:
      - name: keystore-config-persistent-storage
        configMap:
          name: keystore-config-miner03
          items:
          - key: UTC--2019-05-20T13-38-30.380947439Z--563c415aa48f173961b868354ea94a3e0cd6e387
            path: UTC--2019-05-20T13-38-30.380947439Z--563c415aa48f173961b868354ea94a3e0cd6e387
      - name: geth-boot-node-persistent-storage
        hostPath:
          path: /var/lib/docker/geth-storage/bootnode
      - name: genesis-config-persistent-storage
        configMap:
          name: genesis-config
          items:
          - key: Genesis-geth.json
            path: Genesis-geth.json
      - name: miner03-persistent-storage
        persistentVolumeClaim:
          claimName: volume-miner03
      - name: miner03-config-persistent-storage
        configMap:
          name: gethconfig-miner03
          items:
          - key: gethconfig
            path: gethconfig.toml
---
apiVersion: v1
kind: Service
metadata:
  name: monitor-svc
  labels:
    app: kuberneteth
    tier: frontend
    name: monitor-svc
spec:
  selector:
    app: kuberneteth
    tier: frontend
  type: LoadBalancer
  ports:
    - name: monitor-port
      protocol: TCP
      port: 3001
      nodePort: 30100
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: monitor
spec:
  selector:
    matchLabels:
      app: kuberneteth
  replicas: 1
  serviceName: monitor
  template:
    metadata:
      name: monitor
      labels:
        app: kuberneteth
        tier: frontend
        name: monitor
    spec:
      initContainers:
      - name: monitor-init-container
        image: ijsfd/eth-net-intelligence-api
        imagePullPolicy: IfNotPresent
        command: [ "sh" ]
        args:
        - "-cx"
        - "cp -r /eth-net-intelligence-api/* /ethmonitor;
           cp /monitor-configmap/app.json /ethmonitor/app.json;
           sed -i \"s/miner01-rpchost/$MINER01_SVC_SERVICE_HOST/g\" /ethmonitor/app.json;
           sed -i \"s/miner02-rpchost/$MINER02_SVC_SERVICE_HOST/g\" /ethmonitor/app.json;
           sed -i \"s/miner03-rpchost/$MINER03_SVC_SERVICE_HOST/g\" /ethmonitor/app.json;
           exit 0;"
        volumeMounts:
        - name: monitor-configmap-volume
          mountPath: /monitor-configmap/app.json
          subPath: app.json
          # we need to mount an extra volume to be able to change a value in the configmap
        - name: monitor-config-persistent-storage
          mountPath: /ethmonitor
      containers:
      - name: eth-netstats-container
        image: ijsfd/eth-netstats
        imagePullPolicy: IfNotPresent
        ports:
          - containerPort: 3001
        env:
        - name: WS_SECRET
          value: "connectme"
        - name: PORT
          value: "3001"
      - name: eth-net-intelligence-api-container
        image: ijsfd/eth-net-intelligence-api
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: monitor-config-persistent-storage
          mountPath: /eth-net-intelligence-api/app.json
          subPath: app.json
      volumes:
      - name: monitor-configmap-volume
        configMap:
          name: monitor-config
          items:
          - key: app.json
            path: app.json
      - name: monitor-config-persistent-storage
        persistentVolumeClaim:
          claimName: volume-ethmonitor
      imagePullSecrets:
      - name: dsf-dev-acr
---
apiVersion: v1
kind: Service
metadata:
  name: mongodb-svc
  labels:
    name: mongodb-svc
    app: kuberneteth
    tier: backend
spec:
  ports:
    - port: 27017
      targetPort: 27017
  selector:
    app: kuberneteth
    tier: backend
    name: mongodb-deployment
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: mongodb
spec:
  replicas: 1
  template:
    metadata:
      name: mongodb-deployment
      labels:
        app: kuberneteth
        tier: backend
        name: mongodb-deployment
    spec:
      containers:
      - name: mongodb
        image: mongo:latest
        imagePullPolicy: IfNotPresent
        ports:
        - name: mongodb
          containerPort: 27017
        volumeMounts:
        - name: mongodb-persistent-storage
          mountPath: /data/db
      volumes:
      - name: mongodb-persistent-storage
        persistentVolumeClaim:
          claimName: volume-mongodb
---
apiVersion: v1
kind: Service
metadata:
  name: explorer-svc
  labels:
    app: kuberneteth
    tier: frontend
    name: explorer-svc
spec:
  selector:
    app: kuberneteth
    tier: frontend
    name: explorer
  type: LoadBalancer
  externalTrafficPolicy: Cluster
  ports:
    - name: explorer-port
      protocol: TCP
      port: 3000
      nodePort: 30101
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: explorer
spec:
  selector:
    matchLabels:
      app: kuberneteth
  replicas: 1
  serviceName: explorer
  template:
    metadata:
      name: explorer
      labels:
        app: kuberneteth
        tier: frontend
        name: explorer
    spec:
      containers:
      - name: explorer
        image: ijsfd/explorer:latest
        imagePullPolicy: IfNotPresent
        command: [ "sh" ]
        args:
        - "-cx"
        - "cp -f /explorer-configmap/config.json /explorer/config.json;
           sed -i \"s/miner01-rpchost/$MINER01_SVC_SERVICE_HOST/g\" /explorer/config.json;
           npm start app.js;
           exit 0;"
        ports:
        - containerPort: 3000
        env:
        - name: MONGO_URI
          value: 'mongodb://mongodb-svc/blockDB'
        volumeMounts:
        - name: explorer-configmap-volume
          mountPath: /explorer-configmap/config.json
          subPath: config.json
      volumes:
      - name: explorer-configmap-volume
        configMap:
          name: explorer-config
          items:
          - key: config.json
            path: config.json
