<%
def set_node_template_vars(values)
  @Eth_Etherbase         = values["geth"]["Eth_Etherbase"]
  @Eth_Password          = values["geth"]["Eth_Password"]
  @Node_UserIdent        = values["geth"]["Node_UserIdent"]
  @Node_DataDir          = values["geth"]["Node_DataDir"]
  @Node_HTTPPort         = values["geth"]["Node_HTTPPort"]
  @Node_WSPort           = values["geth"]["Node_WSPort"]
  @NodeP2P_ListenAddr    = values["geth"]["NodeP2P_ListenAddr"]
  @NodeP2P_DiscoveryAddr = values["geth"]["NodeP2P_DiscoveryAddr"]
  @Dashboard_Port        = values["geth"]["Dashboard_Port"]
  @Dashboard_Refresh     = values["geth"]["Dashboard_Refresh"]
  @nodePort_rpc          = values["k8s"]["nodePort_rpc"]
  @nodePort_ipc          = values["k8s"]["nodePort_ipc"]
  @replicas              = values["k8s"]["replicas"]
  @External_RPC_IP       = values["k8s"]["External_RPC_IP"]
  return
end
-%>
<%- unless @config["keystore"]["secret"] -%>
<%- @nodes.each do |node| -%>
<%= set_node_template_vars(node.values.first) -%>
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: keystore-config-<%= @Node_UserIdent %>
  namespace: default
  labels:
    app: kuberneteth
    name: keystore-config-<%= @Node_UserIdent %>
data:
  <%= @config["keystore"]["items"]["#{@Eth_Etherbase}"] %>: |-
<%- File.readlines("keystore/#{@config["keystore"]["items"]["#{@Eth_Etherbase}"]}").each do |line| -%>
    <%= line -%>
<% end -%>
<% end -%>
<% end -%>
<%- @nodes.each do |node| -%>
<%= set_node_template_vars(node.values.first) -%>

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: gethconfig-<%= @Node_UserIdent %>
  namespace: default
  labels:
    app: kuberneteth
    name: gethconfig-<%= @Node_UserIdent %>
data:
  gethconfig: |-
<%- File.readlines("#{@Node_UserIdent}.toml").each do |line| -%>
    <%= line -%>
<% end -%>
<% end %>

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: monitor-config
  namespace: default
  labels:
    app: kuberneteth
    name: monitor-config
data:
  app.json: |-
    [
<%- @nodes.each_with_index do |node, index| -%>
<%= set_node_template_vars(node.values.first) -%>
      {
        "name"              : "<%= @Node_UserIdent %>",
        "cwd"               : ".",
        "script"            : "app.js",
        "log_date_format"   : "YYYY-MM-DD HH:mm Z",
        "merge_logs"        : false,
        "watch"             : false,
        "exec_interpreter"  : "node",
        "exec_mode"         : "fork_mode",
        "env":
        {
          "NODE_ENV"        : "production",
          "RPC_HOST"        : "<%= @Node_UserIdent %>-rpchost",
          "RPC_PORT"        : "<%= @Node_HTTPPort %>",
          "LISTENING_PORT"  : "<%= @NodeP2P_DiscoveryAddr %>",
          "INSTANCE_NAME"   : "<%= @Node_UserIdent %>",
          "CONTACT_DETAILS" : "",
          "WS_SERVER"       : "localhost:3001",
          "WS_SECRET"       : "<%= @config["monitor"]["ws_secret"] %>",
          "VERBOSITY"       : <%= @config["monitor"]["verbosity"] %>
        }
<%- if index == @nodes.length-1 -%>
      }
<% else -%>
      },
<% end -%>
<% end -%>
    ]

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: explorer-config
  namespace: default
  labels:
    name: explorer-config
    app: kuberneteth
data:
  config.json: |-
    {
        "nodeAddr":     "<%= @config["explorer"]["explorerNode"] %>-rpchost",
        "gethPort":     <%= @config["explorer"]["explorerHTTPPort"] %>,
        "startBlock":   0,
        "endBlock":     "latest",
        "quiet":        true,
        "syncAll":      true,
        "patch":        true,
        "patchBlocks":  100
    }

<%- unless @config["geth"]["network"]["public"] -%>
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: genesis-config
  namespace: default
  labels:
    app: kuberneteth
    name: genesis-config
data:
  Genesis-geth.json: |-
    {
        "config": {
            "chainId": <%= @config["geth"]["network"]["id"] %>,
            "homesteadBlock": 1,
            "eip150Block": 2,
            "eip150Hash": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "eip155Block": 3,
            "eip158Block": 3,
            "byzantiumBlock": 4,
            "clique": {
                "period": <%= @config["geth"]["network"]["period"] %>,
                "epoch": 30000
            }
        },
        "nonce": "0x0",
        "timestamp": "0x5cdec502",
        "extraData": "0x00000000000000000000000000000000000000000000000000000000000000000ce04250b1e8aefa4da5411079365881d9edb2a0563c415aa48f173961b868354ea94a3e0cd6e387f7613db032b4fd8569ef036f0e0f2757846659ab0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "gasLimit": "0xAAE6000",
        "difficulty" : "<%= @config["geth"]["difficulty"] %>",
        "mixHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "coinbase": "0x0000000000000000000000000000000000000000",
        "alloc": {
        },
        "number": "0x0",
        "gasUsed": "0x0",
        "parentHash": "0x0000000000000000000000000000000000000000000000000000000000000000"
    }
<% end -%>

<%- @nodes.each do |node| -%>
<%= set_node_template_vars(node.values.first) -%>
---
apiVersion: v1
kind: Service
metadata:
  name: <%= @Node_UserIdent %>-svc
  labels:
    app: kuberneteth
    tier: backend
    name: <%= @Node_UserIdent %>-svc
spec:
  selector:
    app: kuberneteth
    tier: backend
    name: <%= @Node_UserIdent %>
<%- if @nodePort_rpc || @nodePort_ipc -%>
  type: LoadBalancer
  externalTrafficPolicy: Cluster
<% end -%>
  ports:
    - name: <%= @Node_UserIdent %>-jsonrpc
      protocol: TCP
      port: <%= @Node_HTTPPort %>
      targetPort: <%= @Node_HTTPPort %>
<%- if @nodePort_rpc -%>
      nodePort: <%= @nodePort_rpc %>
<% end -%>
    - name: <%= @Node_UserIdent %>-wsrpc
      protocol: TCP
      port: <%= @Node_WSPort %>
      targetPort: <%= @Node_WSPort %>
<%- if @NodeP2P_ListenAddr -%>
    - name: <%= @Node_UserIdent %>-ipc-listen
      protocol: UDP
      port: <%= @NodeP2P_ListenAddr %>
      targetPort: <%= @NodeP2P_ListenAddr %>
<% end -%>
<%- if @NodeP2P_DiscoveryAddr -%>
    - name: <%= @Node_UserIdent %>-ipc-discovery
      protocol: TCP
      port: <%= @NodeP2P_DiscoveryAddr %>
      targetPort: <%= @NodeP2P_DiscoveryAddr %>
<%- if @nodePort_ipc -%>
      nodePort: <%= @nodePort_ipc %>
<% end -%>
<% end -%>
<%- if @Dashboard_Port -%>
    - name: <%= @Node_UserIdent %>-dashboard
      protocol: TCP
      port: <%= @Dashboard_Port %>
      targetPort: <%= @Dashboard_Port %>
<% end -%>
<% end -%>

<%- unless @config["geth"]["network"]["public"] -%>
---
apiVersion: v1
kind: Service
metadata:
  name: geth-bootnode-svc
  labels:
    app: kuberneteth
    tier: backend
    name: geth-bootnode-svc
spec:
  selector:
    app: kuberneteth
    tier: backend
  ports:
    - name: geth-bootnode-ipc-discovery
      protocol: UDP
      port: <%= @config["bootnode"]["geth"]["NodeP2P_DiscoveryAddr"] %>
      targetPort: <%= @config["bootnode"]["geth"]["NodeP2P_DiscoveryAddr"] %>

---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: geth-boot-node-setup-pod
  labels:
    app: kuberneteth
    name: bootnode-setup-pod
spec:
  template:
    metadata:
      labels:
        app: kuberneteth
        name: bootnode-setup-pod
    spec:
      containers:
      - name: geth-boot-node-setup-container
        image: ijsfd/geth-node:latest
        imagePullPolicy: IfNotPresent
        command: [ "sh" ]
        args:
        - "-cx"
        - "cd <%= @config["bootnode"]["geth"]["Node_DataDir"] %>;
           echo \"enode://$(/bootnode -nodekeyhex <%= @config["bootnode"]["nodekeyhex"] %> -writeaddress)@$GETH_BOOTNODE_SVC_SERVICE_HOST:<%= @config["bootnode"]["geth"]["NodeP2P_DiscoveryAddr"] %>\" > enode.address;
           set +x;
           while true; do :; done;"
        volumeMounts:
        - name: geth-boot-node-persistent-storage
          mountPath: <%= @config["bootnode"]["geth"]["Node_DataDir"] %>
      volumes:
      - name: geth-boot-node-persistent-storage
        hostPath:
          path: /var/lib/docker/geth-storage/bootnode
---
apiVersion: v1
kind: Pod
metadata:
  name: geth-boot-node-pod
  labels:
    app: kuberneteth
    name: geth-bootnode-pod
spec:
  containers:
  - name: geth-boot-node-container
    image: ijsfd/geth-node:latest
    imagePullPolicy: IfNotPresent
    ports:
      - containerPort: <%= @config["bootnode"]["geth"]["NodeP2P_ListenAddr"] %>
      - containerPort: <%= @config["bootnode"]["geth"]["NodeP2P_DiscoveryAddr"] %>
        protocol: UDP
    command: [ "sh" ]
    args:
    - "-c"
    - "cd <%= @config["bootnode"]["geth"]["Node_DataDir"] %>;
       /geth --datadir <%= @config["bootnode"]["geth"]["Node_DataDir"] %> init /etc/geth/genesis/Genesis-geth.json;
       /bootnode --nodekeyhex <%= @config["bootnode"]["nodekeyhex"] %> --addr \":<%= @config["bootnode"]["geth"]["NodeP2P_DiscoveryAddr"] %>\" --nat any --verbosity <%= @config["bootnode"]["verbosity"] %>;"
    volumeMounts:
    - name: geth-boot-node-persistent-storage
      mountPath: <%= @config["bootnode"]["geth"]["Node_DataDir"] %>
    - name: genesis-config-persistent-storage
      mountPath: /etc/geth/genesis/Genesis-geth.json
      subPath: Genesis-geth.json
  volumes:
  - name: geth-boot-node-persistent-storage
    hostPath:
      path: /var/lib/docker/geth-storage/bootnode
  - name: genesis-config-persistent-storage
    configMap:
      name: genesis-config
      items:
      - key: Genesis-geth.json
        path: Genesis-geth.json
<% end -%>

<%- @nodes.each do |node| -%>
<%= set_node_template_vars(node.values.first) -%>
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: kuberneteth
    tier: backend
    name: geth-<%= @Node_UserIdent %>
  name: geth-<%= @Node_UserIdent %>
spec:
  selector:
    matchLabels:
      app: kuberneteth
  replicas: <%= @replicas %>
  serviceName: geth-<%= @Node_UserIdent %>
  template:
    metadata:
      name: geth-<%= @Node_UserIdent %>
      labels:
        app: kuberneteth
        tier: backend
        name: <%= @Node_UserIdent %>
    spec:
      initContainers:
<%- unless @config["geth"]["network"]["public"] -%>
      - name: <%= @Node_UserIdent %>-genesis-init-container
        image: ethereum/client-go:<%= @config["geth"]["version"] %>
        imagePullPolicy: IfNotPresent
        command: [ "sh" ]
        args:
        - "-cx"
        - "if [ ! -f <%= @Node_DataDir %>/genesis_created ]; then
             /usr/local/bin/geth --datadir <%= @Node_DataDir %> init /etc/geth/genesis/Genesis-geth.json;
             touch <%= @Node_DataDir %>/genesis_created;
<%- if @Eth_Etherbase && @Eth_Password -%>
             echo <%= @Eth_Password %> > <%= @Node_DataDir %>/password.txt;
<%- end %>
           fi;"
        volumeMounts:
        - name: <%= @Node_UserIdent %>-persistent-storage
          mountPath: <%= @Node_DataDir %>
        - name: geth-boot-node-persistent-storage
          mountPath: <%= @config["bootnode"]["geth"]["Node_DataDir"] %>
        - name: genesis-config-persistent-storage
          mountPath: /etc/geth/genesis/Genesis-geth.json
          subPath: Genesis-geth.json
<% end -%>
      containers:
      - name: <%= @Node_UserIdent %>-container
        image: ethereum/client-go:<%= @config["geth"]["version"] %>
        imagePullPolicy: IfNotPresent
        command: [ "sh" ]
        args:
        - "-cx"
        - "mkdir -p /etc/geth/<%= @Node_UserIdent %>;
           cp /etc/gethconfigmap/<%= @Node_UserIdent %>/gethconfig.toml /etc/geth/<%= @Node_UserIdent %>;
<%- unless @config["geth"]["network"]["public"] -%>
           ENODE=$(cat <%= @config["bootnode"]["geth"]["Node_DataDir"] %>/enode.address);
           ENODE_ESC=$(echo $ENODE | sed 's@//@\\\\/\\\\/@g');
           sed -i \"s/BootstrapNodes = \\[\\]/BootstrapNodes = [\\\"$ENODE_ESC\\\"]/g\" /etc/geth/<%= @Node_UserIdent %>/gethconfig.toml;
           sed -i \"s/BootstrapNodesV5 = \\[\\]/BootstrapNodesV5 = [\\\"$ENODE_ESC\\\"]/g\" /etc/geth/<%= @Node_UserIdent %>/gethconfig.toml;
<% end -%>
           /usr/local/bin/geth \
<%- if @Dashboard_Port || @Dashboard_Refresh -%>
           --dashboard \
<% end -%>
<%- if @Eth_Etherbase && @Eth_Password -%>
           --mine \
<% end -%>
           --verbosity <%= @config["geth"]["verbosity"] %>  \
<%- if @Eth_Etherbase && @Eth_Password -%>
           --unlock <%= @Eth_Etherbase %> --password <%= @Node_DataDir %>/password.txt --gasprice '0' \
<% end -%>
           --config /etc/geth/<%= @Node_UserIdent %>/gethconfig.toml;"
        ports:
          - containerPort: <%= @Node_HTTPPort %>
          - containerPort: <%= @Node_WSPort %>
<%- if @NodeP2P_ListenAddr -%>
          - containerPort: <%= @NodeP2P_ListenAddr %>
<% end -%>
            protocol: UDP
<%- if @NodeP2P_DiscoveryAddr -%>
          - containerPort: <%= @NodeP2P_DiscoveryAddr %>
<% end -%>
<%- if @Dashboard_Port -%>
          - containerPort: <%= @Dashboard_Port %>
<% end -%>
        volumeMounts:
        - name: <%= @Node_UserIdent %>-persistent-storage
          mountPath: <%= @Node_DataDir %>
        - name: <%= @Node_UserIdent %>-config-persistent-storage
          mountPath: /etc/gethconfigmap/<%= @Node_UserIdent %>
        - name: keystore-config-persistent-storage
          mountPath: <%= @Node_DataDir %>/keystore/<%= @config["keystore"]["items"]["#{@Eth_Etherbase}"] %>
          subPath: <%= @config["keystore"]["items"]["#{@Eth_Etherbase}"] %>
<%- unless @config["geth"]["network"]["public"] -%>
        - name: geth-boot-node-persistent-storage
          mountPath: <%= @config["bootnode"]["geth"]["Node_DataDir"] %>
<% end -%>
      volumes:
      - name: keystore-config-persistent-storage
<%- if @config["keystore"]["secret"] -%>
        secret:
          secretName: geth-key-<%= @Node_UserIdent %>
<% else -%>
        configMap:
          name: keystore-config-<%= @Node_UserIdent %>
          items:
          - key: <%= @config["keystore"]["items"]["#{@Eth_Etherbase}"] %>
            path: <%= @config["keystore"]["items"]["#{@Eth_Etherbase}"] %>
<% end -%>
<%- unless @config["geth"]["network"]["public"] -%>
      - name: geth-boot-node-persistent-storage
        hostPath:
          path: /var/lib/docker/geth-storage/bootnode
      - name: genesis-config-persistent-storage
        configMap:
          name: genesis-config
          items:
          - key: Genesis-geth.json
            path: Genesis-geth.json
<% end -%>
      - name: <%= @Node_UserIdent %>-persistent-storage
        persistentVolumeClaim:
          claimName: volume-<%= @Node_UserIdent %>
      - name: <%= @Node_UserIdent %>-config-persistent-storage
        configMap:
          name: gethconfig-<%= @Node_UserIdent %>
          items:
          - key: gethconfig
            path: gethconfig.toml
<% end -%>
---
apiVersion: v1
kind: Service
metadata:
  name: <%= @config["monitor"]["name"] %>-svc
  labels:
    app: kuberneteth
    tier: frontend
    name: <%= @config["monitor"]["name"] %>-svc
spec:
  selector:
    app: kuberneteth
    tier: frontend
<%- if @config["monitor"]["k8s"]["nodePort"] -%>
  type: LoadBalancer
<% end -%>
  ports:
    - name: <%= @config["monitor"]["name"] %>-port
      protocol: TCP
      port: 3001
<%- if @config["monitor"]["k8s"]["nodePort"] -%>
      nodePort: <%= @config["monitor"]["k8s"]["nodePort"] %>
<% end -%>
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: <%= @config["monitor"]["name"] %>
spec:
  selector:
    matchLabels:
      app: kuberneteth
  replicas: 1
  serviceName: monitor
  template:
    metadata:
      name: <%= @config["monitor"]["name"] %>
      labels:
        app: kuberneteth
        tier: frontend
        name: <%= @config["monitor"]["name"] %>
    spec:
      initContainers:
      - name: <%= @config["monitor"]["name"] %>-init-container
        image: buythewhale/ethstats_monitor:latest
        imagePullPolicy: IfNotPresent
        command: [ "sh" ]
        args:
        - "-cx"
        - "cp -r /eth-net-intelligence-api/* /ethmonitor;
           cp /monitor-configmap/app.json /ethmonitor/app.json;
<%- @nodes.each do |node| -%>
<%= set_node_template_vars(node.values.first) -%>
           sed -i \"s/<%= @Node_UserIdent %>-rpchost/$<%= @Node_UserIdent.upcase %>_SVC_SERVICE_HOST/g\" /ethmonitor/app.json;
<% end -%>
           exit 0;"
        volumeMounts:
        - name: monitor-configmap-volume
          mountPath: /monitor-configmap/app.json
          subPath: app.json
          # we need to mount an extra volume to be able to change a value in the configmap
        - name: monitor-config-persistent-storage
          mountPath: /ethmonitor
      containers:
      - name: eth-netstats-container
        image: ijsfd/eth-netstats
        imagePullPolicy: IfNotPresent
        ports:
          - containerPort: 3001
        env:
        - name: WS_SECRET
          value: "<%= @config["monitor"]["ws_secret"] %>"
        - name: PORT
          value: "3001"
      - name: eth-net-intelligence-api-container
        image: ijsfd/eth-net-intelligence-api
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: monitor-config-persistent-storage
          mountPath: /eth-net-intelligence-api/app.json
          subPath: app.json
      volumes:
      - name: monitor-configmap-volume
        configMap:
          name: monitor-config
          items:
          - key: app.json
            path: app.json
      - name: monitor-config-persistent-storage
        persistentVolumeClaim:
          claimName: volume-ethmonitor
      imagePullSecrets:
      - name: dsf-dev-acr
---
apiVersion: v1
kind: Service
metadata:
  name: mongodb-svc
  labels:
    name: mongodb-svc
    app: kuberneteth
    tier: backend
spec:
  ports:
    - port: 27017
      targetPort: 27017
  selector:
    app: kuberneteth
    tier: backend
    name: mongodb-deployment
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: mongodb
spec:
  replicas: 1
  template:
    metadata:
      name: mongodb-deployment
      labels:
        app: kuberneteth
        tier: backend
        name: mongodb-deployment
    spec:
      containers:
      - name: mongodb
        image: mongo:latest
        imagePullPolicy: IfNotPresent
        ports:
        - name: mongodb
          containerPort: 27017
        volumeMounts:
        - name: mongodb-persistent-storage
          mountPath: /data/db
      volumes:
      - name: mongodb-persistent-storage
        persistentVolumeClaim:
          claimName: volume-mongodb
---
apiVersion: v1
kind: Service
metadata:
  name: explorer-svc
  labels:
    app: kuberneteth
    tier: frontend
    name: explorer-svc
spec:
  selector:
    app: kuberneteth
    tier: frontend
    name: explorer
<%- if @config["explorer"]["k8s"]["nodePort"] -%>
  type: LoadBalancer
  externalTrafficPolicy: Cluster
<% end -%>
  ports:
    - name: <%= @config["explorer"]["name"] %>-port
      protocol: TCP
      port: 3000
<%- if @config["explorer"]["k8s"]["nodePort"] -%>
      nodePort: <%= @config["explorer"]["k8s"]["nodePort"] %>
<% end -%>
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: explorer
spec:
  selector:
    matchLabels:
      app: kuberneteth
  replicas: 1
  serviceName: explorer
  template:
    metadata:
      name: explorer
      labels:
        app: kuberneteth
        tier: frontend
        name: explorer
    spec:
      containers:
      - name: explorer
        image: ijsfd/explorer:latest
        imagePullPolicy: IfNotPresent
        command: [ "sh" ]
        args:
        - "-cx"
        - "cp -f /explorer-configmap/config.json /explorer/config.json;
           sed -i \"s/<%= @config["explorer"]["explorerNode"] %>-rpchost/$<%= @config["explorer"]["explorerNode"].upcase %>_SVC_SERVICE_HOST/g\" /explorer/config.json;
           npm start app.js;
           exit 0;"
        ports:
        - containerPort: 3000
        env:
        - name: MONGO_URI
          value: 'mongodb://mongodb-svc/blockDB'
        volumeMounts:
        - name: explorer-configmap-volume
          mountPath: /explorer-configmap/config.json
          subPath: config.json
      volumes:
      - name: explorer-configmap-volume
        configMap:
          name: explorer-config
          items:
          - key: config.json
            path: config.json
