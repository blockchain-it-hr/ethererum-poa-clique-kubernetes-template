# configuration for the bootnode that makes the cluster nodes aware of each other - for that make sure bootnode has same genesis block
bootnodes:
- bootnode:
    # this config values will end up in the k8s manifest directly
    k8s:
      # static external IP
      # External_RPC_IP: 35.229.175.223
      # open a port on each node (optional)
      nodePort_rpc: 30008
      nodePort_ipc: 30009
      replicas: 1
      nodekeyhex: "091bd6067cb4612df85d9c1ff85cc47f259ced4d4cd99816b14f35650f59c322"
      verbosity: 9
    # this config values will alter the geth config toml file which will end up as a ConfigMap in the k8s manifest
    geth:
      storage_size: 20
      # address where the mining rewards will go to (optional)
      Eth_Etherbase: "0x2da602397dbcd7b3f3efec474124746e8e913c44"
      #Eth_Password: "R_e9bH5Jn8@vVSan"
      # threads (optional)
      Node_UserIdent: bootnode
      Node_DataDir: /etc/testnet/bootnode
      Node_HTTPPort: 8545
      Node_WSPort: 8546
      NodeP2P_ListenAddr: 30301
      NodeP2P_DiscoveryAddr: 30303
      # experimental built in dashboard (optional) only works on > v1.7.3
      Dashboard_Port: 8080
      Dashboard_Refresh: 3000000000
    # verbosity of the bootnode [1..9]
# here you can add as many nodes as you like, name and configure them
nodes:
- miner01:
    # this config values will end up in the k8s manifest directly
    k8s:
      # static external IP
      # External_RPC_IP: 35.201.214.235
      # open a port on each node (optional)
      nodePort_rpc: 30001
      nodePort_ipc: 30002
      replicas: 1
    # this config values will alter the geth config toml file which will end up as a ConfigMap in the k8s manifest
    geth:
      storage_size: 20      
      # address where the mining rewards will go to (optional)
      Eth_Etherbase: "0xc11ba4c7c24f70e7a581c7daa92eac108099acec"
      Eth_Password: "123"
      # threads (optional)
      Node_UserIdent: miner01
      Node_DataDir: /etc/testnet/miner01
      Node_HTTPPort: 8545
      Node_WSPort: 8546
      NodeP2P_DiscoveryAddr: 30303
      # experimental built in dashboard (optional) only works on > v1.7.3
      Dashboard_Port: 8080
      Dashboard_Refresh: 3000000000
- miner02:
    # this config values will end up in the k8s manifest directly
    k8s:
      # static external IP
      # External_RPC_IP: 35.234.10.143
      # open a port on each node (optional)
      nodePort_rpc: 30004
      nodePort_ipc: 30005
      replicas: 1
    # this config values will alter the geth config toml file which will end up as a ConfigMap in the k8s manifest
    geth:
      storage_size: 20
      # address where the mining rewards will go to (optional)
      Eth_Etherbase: "0x4c92786b90d848eaa3f4ef46918af724a309ae79"
      Eth_Password: "123"
      # threads (optional)
      Node_UserIdent: miner02
      Node_DataDir: /etc/testnet/miner02
      Node_HTTPPort: 8545
      Node_WSPort: 8546
      NodeP2P_DiscoveryAddr: 30303
      # experimental built in dashboard (optional) only works on > v1.7.3
      Dashboard_Port: 8080
      Dashboard_Refresh: 3000000000
- miner03:
    # this config values will end up in the k8s manifest directly
    k8s:
      # static external IP
      # External_RPC_IP: 35.234.11.123
      # open a port on each node (optional)
      nodePort_rpc: 30006
      nodePort_ipc: 30007
      replicas: 1
    # this config values will alter the geth config toml file which will end up as a ConfigMap in the k8s manifest
    geth:
      storage_size: 20
      # address where the mining rewards will go to (optional)
      Eth_Etherbase: "0x4e7afbdc9413eeb582b3f1be49d652fa714484da"
      Eth_Password: "123"
      # threads (optional)
      Node_UserIdent: miner03
      Node_DataDir: /etc/testnet/miner03
      Node_HTTPPort: 8545
      Node_WSPort: 8546
      NodeP2P_DiscoveryAddr: 30303
      # experimental built in dashboard (optional) only works on > v1.7.3
      Dashboard_Port: 8080
      Dashboard_Refresh: 3000000000
#- member02:
#    # this config values will end up in the k8s manifest directly
#    k8s:
#      # static external IP
#      # External_RPC_IP: 35.229.175.223
#      # open a port on each node (optional)
#      nodePort_rpc: 30011
#      nodePort_ipc: 30012
#      replicas: 1
#    # this config values will alter the geth config toml file which will end up as a ConfigMap in the k8s manifest
#    geth:
#      # address where the mining rewards will go to (optional)
#      Eth_Etherbase: "0x1e2510200cc63faf248150530d16415a52757f50"
#      #Eth_Password: "R_e9bH5Jn8@vVSan"
#      # threads (optional)
#      Node_UserIdent: member02
#      Node_DataDir: /home/testnet/member02
#      Node_HTTPPort: 8545
#      Node_WSPort: 8546
#      NodeP2P_DiscoveryAddr: 30303
#      # experimental built in dashboard (optional) only works on > v1.7.3
#      Dashboard_Port: 8080
#      Dashboard_Refresh: 3000000000
# keep adding nodes
# - member:
# ...
monitor:
  name: monitor
  ws_secret: "123"
  storage_size: 10
  # verbosity can be within [0..3]
  verbosity: 3
  k8s:
    nodePort: 30100
    #externalIP: 35.229.175.220
    externalPort: 80
    # create a private key and add it to the keystore folder
    # ... or just use the example one for testing
    configMap:
      name: genesis-config
      items:
      - key: genesis-geth.json
        path: genesis-geth.json
explorer:
  name: explorer
  storage_size: 10
  explorerNode: miner01
  explorerHTTPPort: 8545
  k8s:
    nodePort: 30101
    #externalIP: 35.229.175.221
    externalPort: 80
    configMap:
      name: explorer-config
      items:
      - key: config.json
        path: config.json
keystore:
  # true: upload secret first via 'kubectl create secret generic geth-key-<keyvalue> --from-file /path/to/keyfile'
  # false: use the key in keystore folder
  secret: false
  items:
    "0xc11ba4c7c24f70e7a581c7daa92eac108099acec": UTC--2019-06-04T13-52-41.551926270Z--c11ba4c7c24f70e7a581c7daa92eac108099acec
    "0x4c92786b90d848eaa3f4ef46918af724a309ae79": UTC--2019-06-04T13-52-48.511656735Z--4c92786b90d848eaa3f4ef46918af724a309ae79
    "0x4e7afbdc9413eeb582b3f1be49d652fa714484da": UTC--2019-06-04T13-52-53.567362092Z--4e7afbdc9413eeb582b3f1be49d652fa714484da
    "0x2da602397dbcd7b3f3efec474124746e8e913c44": UTC--2019-06-04T13-53-00.073235074Z--2da602397dbcd7b3f3efec474124746e8e913c44
    "0x1e2510200cc63faf248150530d16415a52757f50": UTC--2019-06-04T13-53-06.513321284Z--1e2510200cc63faf248150530d16415a52757f50
geth:
  # you can find suitable tags in https://hub.docker.com/r/ethereum/client-go/tags/
  # due to some config file changes in geth it needs to be > 1.8.0
  version: stable
  network:
    # network id (1: mainnet, 3: ropsten, 4: rinkeby ... )
    id: 12341234
    period: 15
    # public (true|false) is it a public network?
    public: false
    # cross_net (true|false) is it cross different network (cloud)
    cross_net: true
  # hex value of initial difficulty defined in the genesis block
  difficulty: "0x1"
  # as it is a private cluster and do not need cross different network, provide a CIDR of the cluster's network
  # to prevent other nodes connecting from the outside
  # NodeP2P_Netrestrict: "10.36.0.0/14"
  # general verbosity of geth [1..5]
  verbosity: 3

  
